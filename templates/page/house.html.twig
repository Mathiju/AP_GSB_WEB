<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Frais d'hébergement</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background-image: url('https://next-images.123rf.com/index/_next/image/?url=https://assets-cdn.123rf.com/index/static/assets/top-section-bg.jpeg&w=3840&q=75');
            background-size: cover;
            color: #fff;
        }
        .container {
            background: rgba(255, 255, 255, 0.2);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            height: 700px;
        }
        .btn-custom {
            width: 120px;
        }
        .btn-custom-ajouter {
            background-color:rgb(71, 161, 91); /* Vert */
            color: white;
            border: none;
            height: 50px;
            width: 150px;
            font-weight: bold;
            font-size: 1.2rem;
            border-radius: 20px;
        }
        .btn-custom-ajouter:hover {
            background-color: rgb(42, 139, 82);
        }
        .btn-custom-modifier {
            background-color: rgb(62, 156, 141); /* Bleu clair */
            color: white;
            border: none;
            height: 50px;
            width: 150px;
            font-weight: bold;
            font-size: 1.2rem;
            border-radius: 20px;
        }
        .btn-custom-modifier:hover {
            background-color: rgb(42, 139, 134);
        }
        .btn-custom-supprimer {
            background-color: rgb(155, 72, 72); /* Rouge */
            color: white;
            border: none;
            height: 50px;
            width: 150px;
            font-weight: bold;
            font-size: 1.2rem;
            border-radius: 20px;
        }
        .btn-custom-supprimer:hover {
            background-color: rgb(139, 42, 42);
        }
        .btn-custom-retour, .btn-custom-logout {
            background-color: #6c757d;
            color: white;
            border: none;
            height: 50px;
            width: 180px;
            font-weight: bold;
            font-size: 1.2rem;
            border-radius: 20px;
        }
        .btn-custom-retour:hover, .btn-custom-logout:hover {
            background-color:rgb(148, 157, 165);
        }
        .selected {
            background-color: rgba(0, 123, 255, 0.3); 
            color: white; 
            border: 1px solid #007bff; 
            cursor: pointer; 
        }
        /* Appliquer un texte noir dans les modales */
        .modal-content {
        color: black; /* Définit la couleur du texte à noir */
        }

        .modal-body {
        color: black; /* Définit la couleur du texte à noir pour le contenu de la modale */
        }

        .modal-header .modal-title {
        color: black; /* Définit la couleur du titre de la modale à noir */
        }

        .modal-footer button {
        color: black; /* Définit la couleur du texte des boutons de la modale */
        }
    </style>
</head>
<body class="d-flex justify-content-center align-items-center vh-100">
    <div class="container text-white">
        <div class="d-flex justify-content-between">
            <button class="btn-custom-retour" id="retour">Retour</button>
            <h3>Frais d'hébergement</h3>
            <button class="btn-custom-logout" id="logout">Se déconnecter</button>
        </div>

        <div class="mt-3">
            <div class="border p-3 bg-light text-dark" style="height: 500px;">
                <div class="content">
                    <div class="box">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Type de frais</th>
                                    <th>Nombre de nuit</th>
                                    <th>Valeur (€)</th>
                                    <th>Statut</th>
                                </tr>
                            </thead>
                            <tbody id="fraisTableBody">
                                <!-- Les frais seront ajoutés ici dynamiquement -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-3 d-flex justify-content-center gap-3">
            <button class="btn-custom-ajouter" id="add">Ajouter</button>
            <button class="btn-custom-modifier" id="modifier">Modifier</button>
            <button class="btn-custom-supprimer" id="supprimer">Supprimer</button>
        </div>
    </div>

    <!-- Modal Ajouter -->
    <div class="modal fade" id="fraisModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">Ajouter un frais d'hébergement</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <div class="modal-body">
                    <form id="fraisForm">
                        <div class="mb-3">
                            <label for="dateFrais" class="form-label">Date</label>
                            <input type="date" class="form-control" id="dateFrais" required>
                        </div>
                        <div class="mb-3">
                            <label for="nomFrais" class="form-label">Nombre de nuit</label>
                            <input type="text" class="form-control" id="nomFrais" required>
                        </div>
                        <button type="submit" class="btn btn-success">Ajouter</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Modification -->
    <div class="modal fade" id="modificationModal" tabindex="-1" aria-labelledby="modificationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modificationModalLabel">Modifier un frais kilométrique</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <div class="modal-body">
                    <form id="modificationForm">
                        <div class="mb-3">
                            <label for="dateFraisModif" class="form-label">Date</label>
                            <input type="date" class="form-control" id="dateFraisModif" required>
                        </div>
                        <div class="mb-3">
                            <label for="nomFraisModif" class="form-label">Nombre de nuit</label>
                            <input type="text" class="form-control" id="nomFraisModif" required>
                        </div>
                        <button type="submit" class="btn btn-primary">Modifier</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Firebase Imports -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";
        import { getFirestore, collection, getDocs, addDoc, doc, updateDoc, deleteDoc } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js";

        const firebaseConfig = {
            apiKey: "AIzaSyB24J4yHKRpk59CG-mnLUzJzizIuSo64-Q",
            authDomain: "ap-gsp.firebaseapp.com",
            projectId: "ap-gsp",
            storageBucket: "ap-gsp.firebasestorage.app",
            messagingSenderId: "817436331010",
            appId: "1:817436331010:web:b4f49704fd32d367bf6b1b"
        };

        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        // Fonction d'affichage des frais
        async function afficherFrais() {
        const fraisCollection = collection(db, "frais");
        const fraisSnapshot = await getDocs(fraisCollection);
        const tableBody = document.getElementById("fraisTableBody");

        tableBody.innerHTML = ""; // Vider le tableau

        fraisSnapshot.forEach((doc) => {
        const data = doc.data();
        const id = doc.id;

        if (data.type_frais && data.type_frais.toLowerCase() === "hotel") {
            let statut = "En attente"; // Par défaut, statut en attente

            if (data.statut) {
                if (data.statut === "Refusé" && data.justification) {
                    statut = `Refusé - ${data.justification}`;
                } else {
                    statut = data.statut; // Validé ou autre
                }
            }

            const row = `
                <tr data-id="${id}">
                    <td>${data.date}</td>
                    <td>${data.type_frais}</td>
                    <td>${data.nomFrais} nuit</td>
                    <td>${data.valeur}€</td> 
                    <td>${statut}</td>
                </tr>
            `;
            tableBody.innerHTML += row;
            }
        });
    }


        // Fonction d'ajout de frais
        async function ajouterFrais(date, nomFrais) {
            const fraisCollection = collection(db, "frais");
            const valeur = (parseFloat(nomFrais) * 40).toFixed(2); // Calcul du montant (40€/nuit)

            await addDoc(fraisCollection, {
                date: date,
                nomFrais: nomFrais,
                valeur: valeur,
                type_frais: "hotel"
            });

            afficherFrais();
        }

        // Fonction de suppression de frais
        async function supprimerFrais(id) {
            const fraisDoc = doc(db, "frais", id);
            await deleteDoc(fraisDoc);

            afficherFrais();
        }

        // Fonction de modification de frais
        async function modifierFrais(id, date, nomFrais) {
            const fraisDoc = doc(db, "frais", id);
            const valeur = (parseFloat(nomFrais) * 40).toFixed(2);

            await updateDoc(fraisDoc, {
                date: date,
                nomFrais: nomFrais,
                valeur: valeur
            });

            afficherFrais();
        }

        // Affichage initial des frais
        afficherFrais();

        document.getElementById('retour').addEventListener('click', function(event) {
        event.preventDefault(); // Empêche le comportement par défaut du lien
        // Ajoutez ici le code pour déconnecter l'utilisateur si nécessaire
        window.location.href = 'home'; // Redirige vers la route de login
        });
        document.getElementById('logout').addEventListener('click', function(event) {
        event.preventDefault(); // Empêche le comportement par défaut du lien
        // Ajoutez ici le code pour déconnecter l'utilisateur si nécessaire
        window.location.href = 'login'; // Redirige vers la route de login
        });

        // Sélectionner une ligne dans le tableau
        document.querySelector("#fraisTableBody").addEventListener("click", function (event) {
        if (event.target.closest("tr")) {
        // Retirer la classe 'selected' de toutes les lignes
        const rows = document.querySelectorAll("tr");
        rows.forEach(row => row.classList.remove("selected"));
        
        // Ajouter la classe 'selected' à la ligne cliquée
        const row = event.target.closest("tr");
        row.classList.add("selected");

        // Mémoriser l'ID de la ligne sélectionnée
        window.selectedRowId = row.getAttribute("data-id");
        }
        });

        // Ajouter
        document.getElementById("add").addEventListener("click", () => {
            const fraisModal = new bootstrap.Modal(document.getElementById('fraisModal'));
            fraisModal.show();
        });

        // Soumettre le formulaire d'ajout
        document.getElementById("fraisForm").addEventListener("submit", async (e) => {
            e.preventDefault();
            const date = document.getElementById("dateFrais").value;
            const nomFrais = document.getElementById("nomFrais").value;

            await ajouterFrais(date, nomFrais);
            const fraisModal = bootstrap.Modal.getInstance(document.getElementById('fraisModal'));
            fraisModal.hide();
        });

        // Modifier
        document.getElementById("modifier").addEventListener("click", async () => {
            const selectedRow = document.querySelector(".selected");
            if (selectedRow) {
                const id = selectedRow.getAttribute("data-id");
                const date = selectedRow.cells[0].innerText;
                const nomFrais = selectedRow.cells[2].innerText.split(" ")[0]; // Extraire les km

                document.getElementById("dateFraisModif").value = date;
                document.getElementById("nomFraisModif").value = nomFrais;

                const modificationModal = new bootstrap.Modal(document.getElementById('modificationModal'));
                modificationModal.show();

                document.getElementById("modificationForm").addEventListener("submit", async (e) => {
                    e.preventDefault();
                    const newDate = document.getElementById("dateFraisModif").value;
                    const newNomFrais = document.getElementById("nomFraisModif").value;

                    await modifierFrais(id, newDate, newNomFrais);
                    const modifModal = bootstrap.Modal.getInstance(document.getElementById('modificationModal'));
                    modifModal.hide();
                });
            } else {
                alert("Veuillez sélectionner un frais à modifier");
            }
        });

        // Bouton supprimer
        document.getElementById("supprimer").addEventListener("click", async function () {
        if (!window.selectedRowId) {
        alert("Veuillez sélectionner une ligne à supprimer.");
        return;
        }

        // Demander une confirmation avant la suppression
        const confirmation = confirm("Êtes-vous sûr de vouloir supprimer ce frais ?");
        if (!confirmation) {
        return;
        }

        // Récupérer la référence du document à supprimer
        const fraisRef = doc(db, "frais", window.selectedRowId);

        // Supprimer le document de Firebase
        await deleteDoc(fraisRef);

        // Supprimer la ligne du tableau dans le DOM
        const rowToDelete = document.querySelector(`tr[data-id="${window.selectedRowId}"]`);
        if (rowToDelete) {
        rowToDelete.remove(); // Supprimer la ligne du tableau
        }

        alert("Frais supprimé !");
        window.selectedRowId = null; // Réinitialiser l'ID sélectionné
    });

    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
